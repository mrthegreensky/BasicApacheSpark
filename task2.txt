import scala.io.Source

class Node(val id: Int) {
    var neighbours: List[Node] = List()

    def newNeighbour(n: Node) {
        neighbours = neighbours :+ n
    }
    
    def 
}

class Graph() {
    var nodes : List[Node] = List()

    def getNode(id: Int) : Node = {
        for (node <- nodes) {
            if (node.id == id) return node;
        }
        var node = new Node(id)
        nodes = nodes :+ node
        return node
    }
    
    def printNodes() {
        for(node <- nodes) {
            println(node.id)
        }
    }
}

def readFile() : Iterator[Array[String]] = {
    return Source.fromFile("data_input").getLines().map(line => line.split("\t"))
}

var graph = new Graph()

def addEdge(edge : Array[String]) {
    var node1 = graph.getNode(edge(0).toInt)
    var node2 = graph.getNode(edge(1).toInt)
    node1.newNeighbour(node2)
    node2.newNeighbour(node1)
}

readFile().foreach(addEdge)

var result = Map()

for(node <- graph.nodes) {
    result = result :+ (node -> node.neighbours.toArray)
}
