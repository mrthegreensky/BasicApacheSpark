import scala.io.Source

class Graph() {
    var edges : Set[(Int, Int)] = Set()

    def addUndirectedEdge(s: Int, e: Int) {
        edges += ((s, e))
        edges += ((e, s))
    }
}

def readFile() : Iterator[Array[String]] = {
    return Source.fromFile("data_input").getLines().map(line => line.split("\t"))
}

var graph = new Graph()

def addEdge(edge : Array[String]) {
    graph.addUndirectedEdge(edge(0).toInt, edge(1).toInt)
}

readFile().foreach(addEdge)

var result = graph.edges.groupBy(_._1).map{ case (key, value) => (key,
value.map(_._2).toList) }
//for( (k,v) <- result ) {
//    print("Key: " + k + " " + "Value: " +  v + "\n")
//}

//println (result.size)
