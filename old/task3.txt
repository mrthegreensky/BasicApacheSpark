import scala.io.Source

class Graph() {
    var edges : Set[(Int, Int)] = Set()

    def addDirectedEdge(s: Int, e: Int) {
        edges += ((s, e))
    }
}

def readFile() : Iterator[Array[String]] = {
    return Source.fromFile("data_input").getLines().map(line => line.split("\t"))
}

var graph = new Graph()

def addEdge(edge : Array[String]) {
    graph.addDirectedEdge(edge(0).toInt, edge(1).toInt)
}

def task2() : Map[Int, List[Int]] = {
    readFile().foreach(addEdge)

    var res :Map[Int, List[Int]] = Map()
    res = res ++ graph.edges.groupBy(_._1).map{ case (key, value) => (key,
    value.map(_._2).toList) }

    var max = 0
    for( (k,v) <- res ) {
        if (v.length > max) max = v.length;
    }

    res.filter(_._2.size == max)
}

var result = task2()
